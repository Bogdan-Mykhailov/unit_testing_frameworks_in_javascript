{
  "stats": {
    "suites": 4,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-05T10:28:54.048Z",
    "end": "2024-08-05T10:28:54.058Z",
    "duration": 10,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "54c245bb-ec53-4d0a-9f08-ba6e169db72a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "01a87615-7bbe-4bae-9201-320bbad09e6d",
          "title": "getEvenNumbersFromArray positive test",
          "fullFile": "/Users/bogdan_mykhailov/Documents/bogdan_work/unit_testing_frameworks_in_javascript/test/numbers-validator/getEvenNumbersFromArray.spec.js",
          "file": "/test/numbers-validator/getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray positive test\"",
              "fullTitle": "getEvenNumbersFromArray positive test \"before each\" hook in \"getEvenNumbersFromArray positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "5fbd1312-a66e-42b2-85c8-4a02715f4bd5",
              "parentUUID": "01a87615-7bbe-4bae-9201-320bbad09e6d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray positive test\"",
              "fullTitle": "getEvenNumbersFromArray positive test \"after each\" hook in \"getEvenNumbersFromArray positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "0e257cc4-2255-4f68-b82a-bd541fd99393",
              "parentUUID": "01a87615-7bbe-4bae-9201-320bbad09e6d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return an array of even numbers",
              "fullTitle": "getEvenNumbersFromArray positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = [5, 2, 6, 11, 12];\nconst evenNumbers = validator.getEvenNumbersFromArray(data);\nexpect(evenNumbers).to.be.eql([2, 6, 12]);",
              "err": {},
              "uuid": "ee893935-f5ed-4123-bea4-bd559364407f",
              "parentUUID": "01a87615-7bbe-4bae-9201-320bbad09e6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if array is not full of numbers",
              "fullTitle": "getEvenNumbersFromArray positive test should throw an error if array is not full of numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = [5, '2', 6, 11, 12];\nexpect(() => {\n  validator.getEvenNumbersFromArray(data);\n}).to.throw(`[${data}] is not an array of \"Numbers\"`)",
              "err": {},
              "uuid": "21ad98a2-d5d3-49c2-9211-dc138f97a035",
              "parentUUID": "01a87615-7bbe-4bae-9201-320bbad09e6d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee893935-f5ed-4123-bea4-bd559364407f",
            "21ad98a2-d5d3-49c2-9211-dc138f97a035"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "653a6f4d-7e3f-4933-9a77-e16ce4e41f46",
          "title": "isAllNumbers positive test",
          "fullFile": "/Users/bogdan_mykhailov/Documents/bogdan_work/unit_testing_frameworks_in_javascript/test/numbers-validator/isAllNumbers.spec.js",
          "file": "/test/numbers-validator/isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers positive test\"",
              "fullTitle": "isAllNumbers positive test \"before each\" hook in \"isAllNumbers positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator()",
              "err": {},
              "uuid": "c1c60dbd-3e17-4f82-a120-817915b9088a",
              "parentUUID": "653a6f4d-7e3f-4933-9a77-e16ce4e41f46",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers positive test\"",
              "fullTitle": "isAllNumbers positive test \"after each\" hook in \"isAllNumbers positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "0d1423e5-630d-4167-bab0-9438408632ab",
              "parentUUID": "653a6f4d-7e3f-4933-9a77-e16ce4e41f46",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if all arguments are numbers",
              "fullTitle": "isAllNumbers positive test should return true if all arguments are numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = [1, 2, 3, 4, 5, 6, 7];\nconst args = validator.isAllNumbers(data);\nexpect(args).to.be.eql(true);",
              "err": {},
              "uuid": "75c84833-8320-4b6c-b3f2-383bb17e6afd",
              "parentUUID": "653a6f4d-7e3f-4933-9a77-e16ce4e41f46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if argument in array is not a number",
              "fullTitle": "isAllNumbers positive test should throw an error if argument in array is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = '2';\nexpect(() => {\n  validator.isAllNumbers(data);\n}).to.throw(`[${data}] is not an array`)",
              "err": {},
              "uuid": "eb89cdf6-1c88-450c-8e4b-99dd5809deff",
              "parentUUID": "653a6f4d-7e3f-4933-9a77-e16ce4e41f46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "75c84833-8320-4b6c-b3f2-383bb17e6afd",
            "eb89cdf6-1c88-450c-8e4b-99dd5809deff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "993722ba-2516-4921-92ea-570dceaa742e",
          "title": "isInteger positive test",
          "fullFile": "/Users/bogdan_mykhailov/Documents/bogdan_work/unit_testing_frameworks_in_javascript/test/numbers-validator/isInteger.spec.js",
          "file": "/test/numbers-validator/isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger positive test\"",
              "fullTitle": "isInteger positive test \"before each\" hook in \"isInteger positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "d8c405c3-c7c5-4f67-8b40-757869db15c6",
              "parentUUID": "993722ba-2516-4921-92ea-570dceaa742e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger positive test\"",
              "fullTitle": "isInteger positive test \"after each\" hook in \"isInteger positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "9d16675b-8089-4345-905f-74fd62ec0c7e",
              "parentUUID": "993722ba-2516-4921-92ea-570dceaa742e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if is a number",
              "fullTitle": "isInteger positive test should return true if is a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const integer = validator.isInteger(1);\nexpect(integer).to.be.equal(true)",
              "err": {},
              "uuid": "ff52cf21-0a47-4cea-ad81-5e25ec1fe98b",
              "parentUUID": "993722ba-2516-4921-92ea-570dceaa742e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw error if is not a number",
              "fullTitle": "isInteger positive test should throw error if is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n      validator.isInteger(true)\n    }).to.throw('[true] is not a number')",
              "err": {},
              "uuid": "5a3f46a2-5b1f-4d7f-8b40-9f86f1047dd6",
              "parentUUID": "993722ba-2516-4921-92ea-570dceaa742e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff52cf21-0a47-4cea-ad81-5e25ec1fe98b",
            "5a3f46a2-5b1f-4d7f-8b40-9f86f1047dd6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7cd2b349-3a93-4f4d-932a-4095ced62641",
          "title": "isNumberEven positive tests",
          "fullFile": "/Users/bogdan_mykhailov/Documents/bogdan_work/unit_testing_frameworks_in_javascript/test/numbers-validator/isNumberEven.spec.js",
          "file": "/test/numbers-validator/isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "cea7b043-714a-40f4-8532-3718d7d7a8c3",
              "parentUUID": "7cd2b349-3a93-4f4d-932a-4095ced62641",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "f49a2963-0a1a-49b2-bf45-a25d88ad9c24",
              "parentUUID": "7cd2b349-3a93-4f4d-932a-4095ced62641",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "a7db17a6-6269-4d0c-8dca-24ce3c762393",
              "parentUUID": "7cd2b349-3a93-4f4d-932a-4095ced62641",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "isNumberEven positive tests should return false when provided with an odd number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "43b8f884-2b46-49ab-a315-b0887af8f081",
              "parentUUID": "7cd2b349-3a93-4f4d-932a-4095ced62641",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provide a string",
              "fullTitle": "isNumberEven positive tests should throw an error when provide a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw(`[4] is not of type \"Number\" it is of type \"string\"`)",
              "err": {},
              "uuid": "79b2c6c3-dc36-4196-ba21-b3b2d4ca1a83",
              "parentUUID": "7cd2b349-3a93-4f4d-932a-4095ced62641",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7db17a6-6269-4d0c-8dca-24ce3c762393",
            "43b8f884-2b46-49ab-a315-b0887af8f081",
            "79b2c6c3-dc36-4196-ba21-b3b2d4ca1a83"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}